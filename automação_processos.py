# -*- coding: utf-8 -*-
"""Automação_Processos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wxA0ao4hVtOGEVi_jA2dz7dpDFX1MdGv

# **Importação da biblioteca Pandas**

A biblioteca Pandas será utilizada nesse processo para garantir a criação dos arquivos de forma automática. O uso dessa biblioteca foi preterido por conta da fácil manipulação de arquivos e, também, por ser muito indicada para trabalhar com DataFrames (ou tabelas).

Além da importação, a biblioteca Pandas foi apelidada como 'pd' que é apenas uma abreviação e irá facilitar na digitação durante o processo de codificação.
"""

import pandas as pd

"""# **Criação dos DataFrames**

Criando os DataFrames com os relatórios extraídos do SAP referentes ao mês anterior.

"""

# Relatório de pagamentos
df_payment = pd.read_excel('Payment List.xlsx')

df_payment.head()

# Relatório de Spend
df_spend = pd.read_excel('Spend List.xlsx')

df_spend.head()

# Relatório de POs (Purchase Orders) criados
df_PO = pd.read_excel('PO List.xlsx')

df_PO.head()

"""# **Tratamento de Dados**

Esse passo é importante para garantir a integridade dos dados e fazer os filtros necessários para o processo interno.
"""

# Tratando alguns dados de colunas do relatório de pagamentos

df_payment = df_payment[df_payment['Tipo de documento'] != 'KZ']

df_payment.head()

# Tratamento dos dados do relatório de Spend

df_spend = df_spend[df_spend['Tipo de documento'] != 'KZ']

df_spend['Tipo de documento'].unique()

df_spend.columns

# Tratamento dos dados do relatório de POs

# Necessário retirar os códigos de eliminação porque eles representam POs excluídos ou bloqueados no SAP
# e isso não terá valor para o Dashboard

df_PO = df_PO[df_PO['Código eliminação'] != 'L']

df_PO.head()

"""# **Upload dos arquivos que serão usados como Templates**"""

# Fazendo upload do arquivo template de pagamentos

df_template_payment = pd.read_excel('3. Template for Manual Data - Payments Details PBI (1).xlsx', sheet_name= 'Payment list')

df_template_payment.head()

# Fazendo upload do arquivo template de spend

df_template_spend = pd.read_excel('1. Template for Manual Data - Spend Details PBI (1).xlsx', sheet_name= 'Spend Details ')

df_template_spend.head()

# Fazendo upload do arquivo template de POs criados

df_template_PO = pd.read_excel('2. Template for Manual Data - PO Details PBI (1).xlsx', sheet_name= 'PO Information')

df_template_PO.head()

"""# **Removendo os valores das linhas dos Templates**

Etapa importante para que sejam inseridos os novos dados nas linhas
"""

# Preservando as colunas do template e apagando os valores para preenchê-los com os novos

df_final_payment = pd.DataFrame(columns= df_template_payment.columns)

df_final_payment.head()

# SPEND

df_final_spend = pd.DataFrame(columns= df_template_spend.columns)

df_final_spend.head()

# PO

df_final_PO = pd.DataFrame(columns= df_template_PO.columns)

df_final_PO.head()

"""# **Preenchimento dos novos valores**"""

# Preenchendo a primeira coluna do template

df_final_payment['ICS CODE'] = df_payment['Centro'].apply(lambda x: 4100 if x not in [1024, 1028] else 1761)

df_final_payment.head()

# Preenchendo outras colunas

df_final_payment['INVOICE NUM'] = df_payment['Referência']
df_final_payment['SBU'] = 'Americas & APAC SBU'
df_final_payment['INVOICE DATE'] = df_payment['Data do documento']
df_final_payment['DUE DATE'] = df_payment['Vencimento']
df_final_payment['PAYMENT DATE'] = df_payment['Data de compensação']
df_final_payment['SUPPLIER NUMBER'] = df_payment['Fornecedor']
df_final_payment['SUPPLIER NAME'] = df_payment['Nome 1']
df_final_payment['INVOICE AMOUNT'] = df_payment['Valor líquido']
df_final_payment['CURRENCY'] = df_payment['Moeda']

df_final_payment.head()

df_final_spend.head()

# Preenchendo valores de Spend

df_final_spend['OPERATNG_UNIT_CODE'] = df_spend['Centro'].apply(lambda x: 4100 if x not in [1024, 1028] else 1761)
df_final_spend['OPERATING_UNIT_NAME'] = df_spend['Centro'].apply(lambda x: 'CPM Braxis S.A.' if x not in [1024, 1028] else 'Capgemini Business Services Brasil - Assessoria Empresarial Ltda.')
df_final_spend['LEGAL_ENTITY'] = df_final_spend['OPERATNG_UNIT_CODE'].astype(str) + ' ' + df_final_spend['OPERATING_UNIT_NAME'].astype(str)
df_final_spend['COUNTRY'] = 'Brazil'
df_final_spend['REGION'] = 'Americas'
df_final_spend['VENDOR_CODE'] = df_spend['Fornecedor']
df_final_spend['VENDOR_NAME_LEVEL1'] = df_spend['Nome 1']
df_final_spend['SBU_CODE'] = df_final_spend['OPERATNG_UNIT_CODE']
df_final_spend['SBU_NAME'] = df_final_spend['OPERATING_UNIT_NAME']
df_final_spend['PURCHASE_ORDER_NUMBER '] = df_spend['Documento de compras']
df_final_spend['PURCHASE_ORDER_CREATE_DATE'] = df_spend['Data do pedido']
df_final_spend['PURCHASE_ORDER_AMOUNT'] = df_spend['Valor líquido']
df_final_spend['PURCHASE_ORDER_AMOUNT_BILLED'] = df_spend['Valor líquido']
df_final_spend['PURCHASE_ORDER_CURRENCY'] = df_spend['Moeda']
df_final_spend['INVOICE_NUMBER'] = df_spend['Referência']
df_final_spend['INVOICE_CREATE_DATE'] = df_spend['Data de lançamento']
df_final_spend['INVOICE_DATE'] = df_spend['Data do documento']
df_final_spend['INVOICE_PAYMENT_DATE'] = df_spend['Data de compensação']
df_final_spend['INVOICE_PAYMENT_AMOUNT'] = df_spend['Montante']
df_final_spend['INVOICE AMOUNT'] = df_spend['Valor líquido']
df_final_spend['INVOICE_CURRENCY'] = df_spend['Moeda']

df_final_spend.head()

df_final_PO['ICS Code'] = df_PO['Centro'].apply(lambda x: 4100 if x not in [1024, 1028] else 1761)
df_final_PO['Purchase Order Number'] = df_PO['Documento de compras']
df_final_PO['Supplier Name'] = df_PO['Nome 1']
df_final_PO['SUPPLIER_NUMBER'] = df_PO['Fornecedor']
df_final_PO['PO AMOUNT'] = df_PO['Valor líquido']
df_final_PO['PO Currency'] = df_PO['Moeda']
df_final_PO['PO Creation Date'] = df_PO['Data do pedido']
df_final_PO['Spend Category'] = df_PO['Texto Subcateg.']

df_final_PO.head()

# Salvar o DataFrame no arquivo Excel

df_final_payment.to_excel('3. Template for Manual Data - Payments Details PBI.xlsx', sheet_name='Payment list', index=False)

# Salvar o DataFrame no arquivo Excel

df_final_PO.to_excel('2. Template for Manual Data - PO Details PBI.xlsx', sheet_name='PO Information', index=False)

# Salvar o DataFrame no arquivo Excel

df_final_spend.to_excel('1. Template for Manual Data - Spend Details PBI.xlsx', sheet_name='Spend Details ', index=False)