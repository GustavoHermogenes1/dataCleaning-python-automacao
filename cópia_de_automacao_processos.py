# -*- coding: utf-8 -*-
"""Cópia de Automacao_Processos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MZhBLlDW97rkcJE7l6QaKdqZDj_8MRb2

# **Importação da biblioteca Pandas**

A biblioteca Pandas será utilizada nesse processo para garantir a criação dos arquivos de forma automática. O uso dessa biblioteca foi preterido por conta da fácil manipulação de arquivos e, também, por ser muito indicada para trabalhar com DataFrames (ou tabelas).

Além da importação, a biblioteca Pandas foi apelidada como 'pd' que é apenas uma abreviação e irá facilitar na digitação durante o processo de codificação.
"""

import pandas as pd

"""# **Criação dos DataFrames**

Criando os DataFrames para os relatórios extraídos do SAP referentes ao mês anterior.

O código 'pd.read_excel()' significa que a biblioteca pd (apelido de pandas) está invocando a função 'read_excel()'. Essa função é comumente utilizada para ler arquivos excel. Nesse caso, o caminho arquivo a ser lido é passado entre aspas.

Para cada arquivo, foi criado o nome df_'nome do arquivo'. No exemplo a seguir, o arquivo é o Payment List, portanto foi criado o data frame 'df_payment' que receberá o resultado da função pd.read_excel.

Esse data frame criado (df_'nome do arquivo') será usado para chamar funções presentes na biblioteca Pandas, como, por exemplo:

head() - Usado para mostrar as primeiras 5 linhas do data frame
unique() - Mostra os valores únicos de uma determinada coluna.

"""

# Criando data frame para o Relatório de pagamentos
df_payment = pd.read_excel('Cópia de Payment List.xlsx')

# Visualizando as primeiras 5 linhas
df_payment.head()

# Criando data frame para o Relatório de Spend
df_spend = pd.read_excel('Cópia de Spend List.xlsx')

# Visualizando os dados
df_spend.head()

# Criando data frame para o Relatório de POs(Purchase Orders)
df_PO = pd.read_excel('Cópia de PO List.xlsx')

# Visualizando os dados
df_PO.head()

"""# **Tratamento de Dados**

Esse passo é importante para garantir a integridade dos dados e fazer os filtros necessários para o processo interno.

No relatório de pagamentos e spend, especificamente na coluna 'Tipo de documento', precisamos apenas dos valores 'RE'. Os valores 'KZ' que foram excluídos são de pagamentos estornados, portanto não geram valor para o dashboard.

Já no relatório de POs, precisaremos retirar da coluna 'Código de eliminação' os valores que não estejam em branco. Ou seja, um filtro será utilizado para selecionar apenas os valores que estão como branco. Esse passo é necessário porque, caso tenhamos valores como 'L' ou 'S' nessa coluna, significa que o PO foi bloqueado ou excluído no SAP e esse tipo de PO não gera valor no dashboard.
"""

# Relatório de Pagamentos

# Esse comando retornará os valores que são diferentes de 'KZ' que é a sigla para pagamentos estornados
df_payment = df_payment[df_payment['Tipo de documento'] != 'KZ']

# Visualizando
df_payment.head()

# Relatório de Spend

# Esse comando retornará os valores que são diferentes de 'KZ' que é a sigla para pagamentos estornados
df_spend = df_spend[df_spend['Tipo de documento'] != 'KZ']

# Verificando os valores únicos. Lembrando que devemos ter como valor apenas 'RE', que é o que está sendo retornado
df_spend['Tipo de documento'].unique()

df_spend.columns

# Relatório de POs

# Necessário retirar os códigos de eliminação porque eles representam POs excluídos ou bloqueados no SAP
# e isso não terá valor para o Dashboard

df_PO = df_PO[~df_PO['Código eliminação'].isin(['L', 'S'])]

df_PO.head()

# Verificando os valores únicos. Deve aparecer apenas 'nan'

df_PO['Código eliminação'].unique()

"""# **Upload dos arquivos que serão usados como Templates**

Esses templates são os arquivos que serão usados como base de dados para o dashboard. A ideia desse processo é preencher esses templates de acordo com as informações dos arquivos extraídos do SAP.

Para fazer o upload, devemos fazer o mesmo processo dos arquivos extraídos do SAP, ou seja, será utilizada a função 'read_excel()' da lib pandas também.

Porém, esses templates são arquivos excel que contém 2 abas, então nota-se que foi utilizado o argumento nomeado 'sheet_name' na função read_excel(). Esse argumento serve para que seja selecionada a aba correta, então cada arquivo terá a sua.
"""

# Fazendo upload do arquivo template de pagamentos e definindo a aba correta
df_template_payment = pd.read_excel('Cópia de Template Payments.xlsx', sheet_name= 'Payment list')

df_template_payment.head()

# Fazendo upload do arquivo template de spend e definindo a aba correta
df_template_spend = pd.read_excel('Cópia de Template Spend.xlsx', sheet_name= 'Spend Details ')

df_template_spend.head()

# Fazendo upload do arquivo template de POs e definindo a aba correta
df_template_PO = pd.read_excel('Cópia de Template PO.xlsx', sheet_name= 'PO Information')

df_template_PO.head()

"""# **Removendo os valores das linhas dos Templates**

Etapa importante para que apenas a estrutura do template seja mantida, excluindo os valores anteriores. Com isso será possível a inserção dos novos valores oriundos dos arquivos extraídos anteriormente do SAP.

Foi criado um novo dataframe 'df_final_nome do arquivo'para cada template que será o resultado final.
"""

# Preservando as colunas do template de pagamentos
df_final_payment = pd.DataFrame(columns= df_template_payment.columns)

df_final_payment.head()

# Preservando as colunas do template de spend
df_final_spend = pd.DataFrame(columns= df_template_spend.columns)

df_final_spend.head()

# Preservando as colunas do template de POs
df_final_PO = pd.DataFrame(columns= df_template_PO.columns)

df_final_PO.head()

"""# **Preenchimento dos novos valores**

Inserindo os novos valores oriundos das planilhas extraídas do SAP.
"""

# Preenchendo a coluna 'ICS CODE'. Essa coluna depende do valor da coluna 'Centro'. Se o valor de
# 'Centro' for 1024 ou 1028, ICS CODE receberá o valor de 4100. Senão, receberá 1761.

# Esse processo está relacionado com a divisão interna das entidades da empresa
df_final_payment['ICS CODE'] = df_payment['Centro'].apply(lambda x: 4100 if x not in [1024, 1028] else 1761)

df_final_payment.head()

# Preenchendo as outras colunas do template payment com as respectivas informações já definidas internamente.

df_final_payment['SBU'] = 'Americas & APAC SBU'
df_final_payment['INVOICE DATE'] = df_payment['Data do documento']
df_final_payment['DUE DATE'] = df_payment['Vencimento']
df_final_payment['PAYMENT DATE'] = df_payment['Data de compensação']
df_final_payment['SUPPLIER NUMBER'] = df_payment['Fornecedor']
df_final_payment['CURRENCY'] = df_payment['Moeda']

df_final_payment.head()

# Preenchendo as outras colunas do template spend com as respectivas informações já definidas internamente.

df_final_spend['OPERATNG_UNIT_CODE'] = df_spend['Centro'].apply(lambda x: 4100 if x not in [1024, 1028] else 1761)
df_final_spend['COUNTRY'] = 'Brazil'
df_final_spend['REGION'] = 'Americas'
df_final_spend['VENDOR_CODE'] = df_spend['Fornecedor']
df_final_spend['SBU_CODE'] = df_final_spend['OPERATNG_UNIT_CODE']
df_final_spend['PURCHASE_ORDER_NUMBER '] = df_spend['Documento de compras']
df_final_spend['PURCHASE_ORDER_CREATE_DATE'] = df_spend['Data do pedido']
df_final_spend['PURCHASE_ORDER_CURRENCY'] = df_spend['Moeda']
df_final_spend['INVOICE_CREATE_DATE'] = df_spend['Data de lançamento']
df_final_spend['INVOICE_DATE'] = df_spend['Data do documento']
df_final_spend['INVOICE_PAYMENT_DATE'] = df_spend['Data de compensação']
df_final_spend['INVOICE_CURRENCY'] = df_spend['Moeda']

# Visualizando os dados

df_final_spend.head()

# Preenchendo as outras colunas do template POs com as respectivas informações já definidas internamente.

df_final_PO['ICS Code'] = df_PO['Centro'].apply(lambda x: 4100 if x not in [1024, 1028] else 1761)
df_final_PO['Purchase Order Number'] = df_PO['Documento de compras']
df_final_PO['SUPPLIER_NUMBER'] = df_PO['Fornecedor']
df_final_PO['PO Currency'] = df_PO['Moeda']
df_final_PO['PO Creation Date'] = df_PO['Data do pedido']
df_final_PO['Spend Category'] = df_PO['Texto Subcateg.']

# Visualizando os dados
df_final_PO.head()

"""# **Salvando os arquivos no formato Excel (xlsx)**

Para salvar os templates no formato em que serão usados como base no dashboard (xlsx), a função 'to_excel' da biblioteca pandas foi utilizada.

Note-se que também foi utilizado o argumento nomeado 'sheet_name' para dar o nome a aba.
"""

# Salvar o DataFrame payment no arquivo Excel

df_final_payment.to_excel('3. Template for Manual Data - Payments Details PBI.xlsx', sheet_name='Payment list', index=False)

# Salvar o DataFrame POs no arquivo Excel

df_final_PO.to_excel('2. Template for Manual Data - PO Details PBI.xlsx', sheet_name='PO Information', index=False)

# Salvar o DataFrame spend no arquivo Excel

df_final_spend.to_excel('1. Template for Manual Data - Spend Details PBI.xlsx', sheet_name='Spend Details ', index=False)